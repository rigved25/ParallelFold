long long total2(std::string s, bool verbose) {
    int n = s.size();

    s = " " + s; // now 1-based

    // Allowed pairs as two-character strings.
    std::unordered_set<std::string> allowed = {"AU", "UA", "CG", "GC", "GU", "UG"};

    // Create a 2D DP table with dimensions (n+1) x (n+1), initialized to 0.
    std::vector<std::vector<long long>> dp(n + 1, std::vector<long long>(n + 1, 0));

    // follow LP pseudocode:
    // Base cases: dp[j][j-1] = 1 for each j=1..n (empty subsequence)    
    for (int j = 1; j <= n; ++j) 
        dp[j][j-1] = 1;

    // left to right
    for (int j = 1; j <= n; j++) {
        // Parallelize the loop over i for the current span.

        std::vector<std::vector<long long>> dp_tmp(n + 1, std::vector<long long>(n + 1, 0));

        #pragma omp parallel for schedule(dynamic)

        for (int i = 1; i <= j; ++i) {            
            // Case 1: skip (j is unpaired)
            dp[i][j] = dp[i][j-1];
        }

        #pragma omp parallel for schedule(dynamic)

        for (int i = 1; i <= j; ++i) {            

            // Case 2: {i-1} pair with j? 
            std::string pair = {s[i-1], s[j]};
            if (allowed.count(pair)) {    

                for (int k = 1; k <= i-1; ++k) {  // k<=i-1 not k<=i-2 !

                    dp_tmp[k][i] = dp[k][i-2] * dp[i][j-1]; //single-element write lock
                }
            }
        }

        #pragma omp parallel for schedule(dynamic)        
        // parallel sum
        for (int k = 1; k <= j; ++k) {            
            for (int i=k+1; i<=j;i++)
                dp[k][j] += dp_tmp[k][i];
        }

        if (verbose) {
            std::cout << "j=" << j << std::endl;
            for (int i = 1; i <= j; ++i) 
                std::cout << i<<"-"<<j<<":"<< dp[i][j] << " ";
            std::cout << std::endl;
        }
    }
    return dp[1][n];
}